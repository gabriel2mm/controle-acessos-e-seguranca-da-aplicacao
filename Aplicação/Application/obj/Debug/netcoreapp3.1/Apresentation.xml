<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apresentation</name>
    </assembly>
    <members>
        <member name="T:middleware.Context.Context">
            <summary>
            Entityframework Context
            </summary>
        </member>
        <member name="T:middleware.Contracts.IRepository`1">
            <summary>
            Contract for all repositories
            </summary>
            <typeparam name="TEntity">Database model class</typeparam>
        </member>
        <member name="T:middleware.Controllers.AccountController">
            <summary>
            Account Controller
            </summary>
        </member>
        <member name="M:middleware.Controllers.AccountController.Authenticate(Newtonsoft.Json.Linq.JObject)">
             <summary>
             Application login
             </summary>
             <param name="login">JObject</param>
             <remarks>
                 Sample request:
            
                 POST api/accounts/authenticate
                 {
                    "login" : "login",
                    "password" : "password"
                 }
             </remarks>
             <returns>String token jwt authenticate</returns>
        </member>
        <member name="M:middleware.Controllers.AccountController.UserClaims">
            <summary>
            Return user claims information
            </summary>
            <returns>Json array with Claims information</returns>
        </member>
        <member name="M:middleware.Controllers.AccountController.Register(middleware.Models.User)">
            <summary>
            Register a new User
            </summary>
            <param name="user">User Object format</param>
            <returns>Return registred user</returns>
        </member>
        <member name="T:middleware.Controllers.OrderController">
            <summary>
            Order Controller
            </summary>
        </member>
        <member name="M:middleware.Controllers.OrderController.GetAll">
            <summary>
            Return all Orders
            </summary>
            <returns></returns>
        </member>
        <member name="M:middleware.Controllers.OrderController.ViewOrder(System.String)">
            <summary>
            Returns a specific order
            </summary>
            <param name="id">Order identification string</param>
            <returns>Json Object</returns>
        </member>
        <member name="M:middleware.Controllers.OrderController.ApproveRequest(System.String)">
            <summary>
            Update approve order
            </summary>
            <param name="id">Order identification string</param>
            <returns>json Object</returns>
        </member>
        <member name="M:middleware.Controllers.OrderController.RecuseRequest(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Recuse approve into in order
            </summary>
            <remarks>
            simple request: {
               "description" : "teste"
            }
            </remarks>
            <param name="id">Order identification string</param>
            <param name="json">json request</param>
            <returns>return json Object</returns>
        </member>
        <member name="M:middleware.Controllers.OrderController.UpdateTechnicianOrder(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Update user technician into in order
            </summary>
            <remarks>
            simple request: {
               "description" : "teste"
            }
            </remarks>
            <param name="id">Order identification string</param>
            <param name="json">json request</param>
            <returns>return json Object</returns>
        </member>
        <member name="M:middleware.Controllers.OrderController.UpdateSupporteOrder(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Update user support into in order
            </summary>
            <remarks>
            simple request: {
               "description" : "teste"
            }
            </remarks>
            <param name="id">Order identification string</param>
            <param name="json">json request</param>
            <returns>return json Object</returns>
        </member>
        <member name="M:middleware.Controllers.OrderController.SchedullingOrder(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Update date from schedulling order
            </summary>
            <remarks>
            simple request: {
               "schedulling" : "dd-MM-yyyyHH:mm:ss"
            }
            </remarks>
            <param name="id">Order identification string</param>
            <param name="json">json request</param>
            <returns>return json Object</returns>
        </member>
        <member name="T:middleware.Controllers.RequestController">
            <summary>
            Request controller
            </summary>
        </member>
        <member name="M:middleware.Controllers.RequestController.GetAll">
            <summary>
            Returns all registered Request Object
            </summary>
            <returns>Json Object request</returns>
        </member>
        <member name="M:middleware.Controllers.RequestController.ViewRequest(System.String)">
            <summary>
            Returns a specific Request Object
            </summary>
            <param name="id">Request identification string</param>
            <returns>Json Object request</returns>
        </member>
        <member name="M:middleware.Controllers.RequestController.EditRequest(System.String,middleware.Models.Request)">
            <summary>
            Update Request
            </summary>
            <param name="id">Request identification string</param>
            <param name="request">Json object</param>
            <returns>Status code 200</returns>
        </member>
        <member name="T:middleware.Controllers.RoleController">
            <summary>
            Role Controller
            </summary>
        </member>
        <member name="M:middleware.Controllers.RoleController.GetAll">
            <summary>
            Returns all roles
            </summary>
            <returns>Json Array</returns>
        </member>
        <member name="M:middleware.Controllers.RoleController.FindById(System.String)">
            <summary>
            Returns a specific role
            </summary>
            <param name="id">Role identification string</param>
            <returns>Json Object</returns>
        </member>
        <member name="M:middleware.Controllers.RoleController.Update(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Updates a specific Role
            </summary>
            <remarks>
                sample request: 
                {
                    "name" : "role name"
                }
            </remarks>
            <param name="id">Role identification string</param>
            <param name="json">JObject</param>
            <returns>Json Object</returns>
        </member>
        <member name="M:middleware.Controllers.RoleController.CreateRole(Microsoft.AspNetCore.Identity.IdentityRole)">
            <summary>
            Register a new role
            </summary>
            <param name="role">Identity Role Object format</param>
            <returns>Json Object</returns>
        </member>
        <member name="M:middleware.Controllers.RoleController.Delete(System.String)">
            <summary>
            Deletes a Role
            </summary>
            <param name="id">Role identification string</param>
            <returns>Status code 200 </returns>
        </member>
        <member name="M:middleware.Controllers.RoleController.Permission(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Insert a permission into the role
            </summary>
            <remarks>
                sample request:
                {
                    permission : "permission name"
                }
            </remarks>
            <param name="id">Role identification string</param>
            <param name="json">Object</param>
            <returns>StatusCode 200</returns>
        </member>
        <member name="M:middleware.Controllers.RoleController.RemovePermission(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Remove a permission into the role
            </summary>
            <remarks>
                sample request:
                {
                    permission : "permission name"
                }
            </remarks>
            <param name="id">Role identification string</param>
            <param name="json">Object</param>
            <returns>StatusCode 200</returns>
        </member>
        <member name="M:middleware.Controllers.RoleController.AddRoleInUser(System.String,System.String)">
            <summary>
            Insert a profile on the user
            </summary>
            <param name="id">Role identification string</param>
            <param name="userId">User identification string</param>
            <returns>Status Code 200</returns>
        </member>
        <member name="M:middleware.Controllers.RoleController.RemoveRole(System.String,System.String)">
            <summary>
            Remove profile on the user
            </summary>
            <param name="id">Role identification string</param>
            <param name="userId">User identification string</param>
            <returns>Status code 200</returns>
        </member>
        <member name="T:middleware.Controllers.UserController">
            <summary>
            User Controller
            </summary>
        </member>
        <member name="M:middleware.Controllers.UserController.GetAll">
            <summary>
            Returns all registered users
            </summary>
            <returns>Json Array</returns>
        </member>
        <member name="M:middleware.Controllers.UserController.FindById(System.String)">
            <summary>
            Returns a specific user
            </summary>
            <param name="id">User identification string</param>
            <returns>Json Object</returns>
        </member>
        <member name="M:middleware.Controllers.UserController.Update(System.String,middleware.Models.User)">
            <summary>
            Updates a specific user
            </summary>
            <param name="id">User identification string</param>
            <param name="userModel">User object</param>
            <returns>if it is successfully updated it returns a user, otherwise it returns a json error</returns>
        </member>
        <member name="M:middleware.Controllers.UserController.Delete(System.String)">
            <summary>
            Deletes a user
            </summary>
            <param name="id">User identification string</param>
            <returns>Status code 200 </returns>
        </member>
        <member name="M:middleware.Controllers.UserController.ResetPassword(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Reset the password for a specific user
            </summary>
            <remarks>
                Sample request: 
                {
                    "token" : "user refresh token",
                    "newPassword" : "Strign new password"
                }
            </remarks>
            <param name="id">User identification string</param>
            <param name="json">JObject</param>
            <returns></returns>
        </member>
        <member name="M:middleware.Controllers.UserController.TokenReset(System.String)">
            <summary>
            Generate token password refresh
            </summary>
            <param name="id">User identification string</param>
            <returns>String token</returns>
        </member>
        <member name="T:middleware.Helpers.Permission">
            <summary>
            permission for modules
            </summary>
        </member>
        <member name="T:middleware.Helpers.Policies">
            <summary>
            Class responsible for creating access policies
            </summary>
        </member>
        <member name="T:middleware.Helpers.TokenHelper">
            <summary>
            Support class for creating tokens
            </summary>
        </member>
        <member name="M:middleware.Helpers.TokenHelper.TokenWithRolesClaims(middleware.Models.User,Microsoft.AspNetCore.Identity.UserManager{middleware.Models.User},Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Class responsible for fixing user claims
            </summary>
            <param name="user">Logged User</param>
            <param name="userManager">Usermanager</param>
            <param name="roleManager">RoleManager</param>
            <param name="configuration">configuration - responsible for capturing information from app.json</param>
            <returns> String JWT token</returns>
        </member>
        <member name="T:middleware.Respositories.Repository`1">
            <summary>
            Abstract class that standardizes data access
            </summary>
            <typeparam name="TEntity">Model entity of the database</typeparam>
        </member>
        <member name="T:middleware.Security.TokenService">
            <summary>
            Class responsible for managing jwt tokens
            </summary>
        </member>
        <member name="M:middleware.Security.TokenService.GenerateToken(middleware.Models.User,System.Byte[],System.Collections.Generic.Dictionary{Microsoft.AspNetCore.Identity.IdentityRole,System.Collections.Generic.IList{System.Security.Claims.Claim}})">
            <summary>
            Generate JWT token
            </summary>
            <param name="user">Logged User</param>
            <param name="key">Secret key application</param>
            <param name="pairRoles">Dictionary of roles and claims</param>
            <returns>String Token JWT</returns>
        </member>
        <member name="M:middleware.Security.TokenService.Claims(middleware.Models.User,System.Collections.Generic.Dictionary{Microsoft.AspNetCore.Identity.IdentityRole,System.Collections.Generic.IList{System.Security.Claims.Claim}})">
            <summary>
            Method responsible for organizing user statements
            </summary>
            <param name="user">Logged User</param>
            <param name="pairRoles">Dictionary of roles and claims</param>
            <returns>Array of claim</returns>
        </member>
    </members>
</doc>
